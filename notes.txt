alpha = 20 / 180 * np.pi
theta = 30 / 180 * np.pi
newAxis = [[np.cos(alpha), np.sin(theta) * np.sin(alpha), -np.cos(theta) * np.sin(alpha)],
           [0, np.cos(theta), np.sin(theta)],
           [np.sin(alpha), -np.sin(theta) * np.cos(alpha), np.cos(theta) * np.cos(alpha)]]





14 move scramble: cube.move(["U", "U", "R'", "U'", "F'", "U'", "R", "F", "F", "R'", "F", "F", "R'", "U"])
                


                moveClock.tick()
                moveTime = 0
                moving = True

            if moving:
                if moveTime >= ROTATION_SPEED:
                    print("Done")
                    moveTime = 0
                    moving = False
                else:
                    moveTime += moveClock.tick()






                                elif not self.screen.model.isMoving():
                if self.key == pg.K_RIGHT:
                    self.screen.model.yPhase += 90
                    self.cube.cube = self.cube.Y_Prime()
               
                elif self.key == pg.K_LEFT:
                    self.screen.model.yPhase -= 90
                    self.cube.cube = self.cube.Y()

                elif self.key == pg.K_UP:
                    self.screen.model.xPhase += 90
                    self.cube.cube = self.cube.X()

                elif self.key == pg.K_DOWN:
                    self.screen.model.xPhase -= 90
                    self.cube.cube = self.cube.X_Prime()

                elif self.key == pg.K_z:
                    if pg.key.get_mods() in SHIFT:
                        self.screen.model.zPhase += 90
                        self.cube.cube = self.cube.Z_Prime()
                    else:
                        self.screen.model.zPhase -= 90
                        self.cube.cube = self.cube.Z()

                elif self.key == pg.K_u:
                    if pg.key.get_mods() in SHIFT:
                        self.screen.model.uPhase += 90
                        self.cube.cube = self.cube.U_Prime()
                    else:
                        self.screen.model.uPhase -= 90
                        self.cube.cube = self.cube.U()

                elif self.key == pg.K_d:
                    if pg.key.get_mods() in SHIFT:
                        self.screen.model.dPhase -= 90
                        self.cube.cube = self.cube.D_Prime()
                    else:
                        self.screen.model.dPhase += 90
                        self.cube.cube = self.cube.D()

                elif self.key == pg.K_f:
                    if pg.key.get_mods() in SHIFT:
                        self.screen.model.fPhase += 90
                        self.cube.cube = self.cube.F_Prime()
                    else:
                        self.screen.model.fPhase -= 90
                        self.cube.cube = self.cube.F()

                elif self.key == pg.K_b:
                    if pg.key.get_mods() in SHIFT:
                        self.screen.model.bPhase -= 90
                        self.cube.cube = self.cube.B_Prime()
                    else:
                        self.screen.model.bPhase += 90
                        self.cube.cube = self.cube.B()

                elif self.key == pg.K_l:
                    if pg.key.get_mods() in SHIFT:
                        self.screen.model.lPhase += 90
                        self.cube.cube = self.cube.L_Prime()
                    else:
                        self.screen.model.lPhase -= 90
                        self.cube.cube = self.cube.L()

                elif self.key == pg.K_r:
                    if pg.key.get_mods() in SHIFT:
                        self.screen.model.rPhase -= 90
                        self.cube.cube = self.cube.R_Prime()
                    else:
                        self.screen.model.rPhase += 90
                        self.cube.cube = self.cube.R()
                    
                elif self.key == pg.K_s:
                    solution = self.findPath(self.cube.cube)
                    if solution == False:
                        print("No solution")
                    elif solution == []:
                        print("Already Solved!")
                    else:
                        print(", ".join(solution))